plugins {
  id 'java'
  id 'idea'
  id 'fabric-loom' version '1.6-SNAPSHOT'
  id 'maven-publish'
}

base {
  archivesName = "${mod_name.replaceAll(' ', '')}@${project.name}-${minecraft_version}"
}

dependencies {
  minecraft "com.mojang:minecraft:${minecraft_version}"
  mappings loom.officialMojangMappings()
  modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
  modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
  implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
  compileOnly project(":common")
}

fabricApi {
  configureDataGeneration((settings) -> {
    settings.getOutputDirectory().set(project(":common").file("src/main/generated"))
  })
}

loom {
  if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
    accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
  }

  mixin {
    defaultRefmapName.set("${mod_id}.refmap.json")
  }

  runs {
    client {
      client()
      setConfigName("Fabric Client")
      ideConfigGenerated(true)
      runDir("run")
    }

    server {
      server()
      setConfigName("Fabric Server")
      ideConfigGenerated(true)
      runDir("run")
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).configureEach {
  source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
  from(project(":common").sourceSets.main.allSource)
}

processResources {
  from project(":common").sourceSets.main.resources
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId this.base.archivesName.get()
      from this.components.java
    }
  }

  repositories {
    mavenCentral()
    maven { url "file://" + System.getenv("local_maven") }
  }
}
