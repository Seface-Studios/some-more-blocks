plugins {
  id 'idea'
  id 'maven-publish'
  id 'net.minecraftforge.gradle' version '[6.0,6.2)'
  id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

base {
  archivesName = "${mod_name.replaceAll(' ', '')}@${project.name}-${minecraft_version}"
}

jar {
  manifest {
    attributes(
      'MixinConfigs'            : "${mod_id}.mixins.json,${mod_id}.forge.mixins.json"
    )
  }
}

minecraft {
  mappings channel: 'official', version: minecraft_version
  copyIdeResources = true
  reobf = false

  if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
  }

  runs {
    client {
      workingDirectory project.file('run')
      ideaModule "${rootProject.name}.${project.name}.main"
      taskName 'Client'
      property 'mixin.env.remapRefMap', 'true'
      property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
      args '--username Dev2'
      mods {
        modClientRun {
          source sourceSets.main
          source project(":common").sourceSets.main
        }
      }
    }

    server {
      workingDirectory project.file('run')
      ideaModule "${rootProject.name}.${project.name}.main"
      taskName 'Server'
      property 'mixin.env.remapRefMap', 'true'
      property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
      mods {
        modServerRun {
          source sourceSets.main
          source project(":common").sourceSets.main
        }
      }
    }
  }
}

sourceSets.main.resources {
  srcDir(project(":common").file('src/main/generated'))
}

dependencies {
  minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
  compileOnly project(":common")


  /*
    Hack fix for now, force jopt-simple to be exactly 5.0.4 because Mojang ships that version,
    but some transitive dependencies request 6.0+
  */
  implementation("net.sf.jopt-simple:jopt-simple:${forge_jopt_version}") {
    version { strictly "${forge_jopt_version}" }
  }

  annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")
}

mixin {
  add(sourceSets.main, "${mod_id}.refmap.json")

  config("${mod_id}.mixins.json")
  config("${mod_id}.forge.mixins.json")
}

tasks.withType(JavaCompile).configureEach {
  source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
  source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
  from(project(":common").sourceSets.main.allSource)
}

processResources {
  from project(":common").sourceSets.main.resources
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId base.archivesName.get()
      from components.java
      fg.component(it)
    }
  }
  repositories {
    maven {
      url "file://" + System.getenv("local_maven")
    }
  }
}

sourceSets.each {
  def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
  it.output.resourcesDir = dir
  it.java.destinationDirectory = dir
}
