import groovy.json.JsonSlurper
import groovy.json.JsonGenerator
import groovy.json.JsonOutput
import groovy.json.JsonBuilder

plugins {
  id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
}

subprojects {
  apply plugin: 'java'

  def w = new Date().format("yy")
  def a =  String.format("%02d", Calendar.getInstance().get(Calendar.WEEK_OF_YEAR))

  version = !is_snapshot.toBoolean() ? version : "${w}w${a}a"

  java.toolchain.languageVersion = JavaLanguageVersion.of(21)
  java.withSourcesJar()
  java.withJavadocJar()

  jar {
    exclude(".cache/**", "**/*/README.md", "**/*/.gitkeep")

    from(rootProject.file("LICENSE")) {
      rename { "${it}-${mod_name.replaceAll(' ', '')}" }
    }

    manifest {
      attributes([
        'Specification-Title'     : mod_name,
        'Specification-Vendor'    : mod_author,
        'Specification-Version'   : project.jar.archiveVersion,
        'Implementation-Title'    : project.name,
        'Implementation-Version'  : project.jar.archiveVersion,
        'Implementation-Vendor'   : mod_author,
        'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        'Timestamp'               : System.currentTimeMillis(),
        'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
        'Built-On-Minecraft'      : minecraft_version
      ])
    }
  }

  sourcesJar {
    from(rootProject.file("LICENSE")) {
      rename { "${it}-${mod_name.replaceAll(' ', '')}" }
    }
  }

  repositories {
    mavenCentral()
    maven {
      name = 'Sponge / Mixin'
      url = 'https://repo.spongepowered.org/repository/maven-public/'
    }

    maven { url = "https://jitpack.io" }
  }

  dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'
  }

  tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.getRelease().set(21)
  }

  processResources {
    def expandProps = [
      "version"                   : version,
      "group"                     : project.group,
      "minecraft_version"         : minecraft_version,
      "forge_version"             : forge_version,
      "forge_loader_version_range": forge_loader_version_range,
      "forge_version_range"       : forge_version_range,
      "minecraft_version_range"   : minecraft_version_range,
      "fabric_version"            : fabric_version,
      "fabric_loader_version"     : fabric_loader_version,
      "mod_name"                  : mod_name,
      "mod_author"                : mod_author,
      "mod_id"                    : mod_id,
      "license"                   : license,
      "description"               : project.description,
      "credits"                   : credits,
      "main_url"                  : main_url,
      "source_url"                : source_url,
      "issues_tracker_url"        : source_url.concat("/issues"),
      "crowdin_url"               : crowdin_url,
      "discord_url"               : discord_url
    ]

    filesMatching([
      '**/pack.mcmeta',  '**/lang/**/*.json',  'fabric.mod.json',
      'META-INF/mods.toml', '*.mixins.json']) {
      expand expandProps
    }

    inputs.properties(expandProps)
  }

  tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
  }

  tasks.register("mergeLangFiles") {
    def JSON = new JsonSlurper()
    def mainLangDir = project(":common").file("src/main/resources/assets/${mod_id}/lang")
    def langDirs = mainLangDir.listFiles().findAll { it.isDirectory() }

    langDirs.each { lang ->
      def output = new File(mainLangDir, "${lang.name}.json")
      def langDir = new File(mainLangDir, lang.name)
      def files = fileTree(langDir).include("**/*.json")

      def fullContent = [:]
      files.eachWithIndex { file, i ->
        def jsonFile = new File(langDir, file.name).getText('UTF-8')

        if (i == 0) {
          fullContent = JSON.parseText(jsonFile)
        }

        def currentContent = JSON.parseText(jsonFile)
        fullContent += currentContent
      }

      def generator = new JsonGenerator.Options()
        .excludeNulls()
        .disableUnicodeEscaping()
        .build()

      output.withWriter("UTF-8") { writer ->
        writer.write(generator.toJson(fullContent))
      }
    }
  }
}
