plugins {
  id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'maven-publish'

  def w = new Date().format("yy")
  def a = String.format("%02d", Calendar.getInstance().get(Calendar.WEEK_OF_YEAR))

  version = !is_snapshot.toBoolean() || is_private_build.toBoolean() ? version : "${w}w${a}${snapshot_week_suffix}"

  if (is_private_build.toBoolean()) {
    version = "${version}-private.${a}"
  }

  java {
    toolchain.languageVersion = JavaLanguageVersion.of(java_version.toInteger())
    withSourcesJar()
    withJavadocJar()
  }

  repositories {
    mavenCentral()

    maven {
      name = 'Sponge / Mixin'
      url = 'https://repo.spongepowered.org/repository/maven-public/'
    }

    maven { url = "https://jitpack.io" }
  }

  tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.getRelease().set(java_version.toInteger())
  }

  tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
  }
}

subprojects {
  base {
    archivesName = "${mod_name.replaceAll(' ', '')}@${project.name}-${minecraft_version}"
  }

  jar {
    exclude(".cache/**", "**/*/README.md", "**/*/.gitkeep", "**/*/lang/*/*.json", "**/*/lang/deprecated_strings.json", "**/*/lang/credits.json")

    if (project.name != "forge") {
      exclude("**/forge/**")
    }

    if (project.name != "neoforge") {
      exclude("**/neoforge/**")
    }

    from(rootProject.file("LICENSE")) {
      rename { "${it}-${mod_name.replaceAll(' ', '')}" }
    }

    manifest {
      attributes(
        'Specification-Title'     : mod_name,
        'Specification-Vendor'    : mod_author,
        'Specification-Version'   : project.jar.archiveVersion,
        'Implementation-Title'    : project.name,
        'Implementation-Version'  : project.jar.archiveVersion,
        'Implementation-Vendor'   : mod_author,
        'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        'Timestamp'               : System.currentTimeMillis(),
        'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
        'Built-On-Minecraft'      : minecraft_version
      )
    }
  }

  sourcesJar {
    from(rootProject.file("LICENSE")) {
      rename { "${it}-${mod_name.replaceAll(' ', '')}" }
    }
  }

  dependencies {
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    compileOnly "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"
    testCompileOnly "org.projectlombok:lombok:${lombok_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"
  }

  processResources {
    def expandProps = [
      /* Minecraft */
      "minecraft_version"             : minecraft_version,
      "minecraft_version_range"       : minecraft_version_range,
      "java_version"                  : java_version,

      /* Loaders */
      "fabric_version"                : fabric_version,
      "fabric_loader_version"         : fabric_loader_version,
      "forge_version"                 : forge_version,
      "forge_loader_version_range"    : forge_loader_version_range,
      "forge_version_range"           : forge_version_range,
      "neoforge_version"              : neoforge_version,
      "neoforge_loader_version_range" : neoforge_loader_version_range,
      "neoforge_version_range"        : neoforge_version_range,

      /* Informations */
      "version"                       : version,
      "group"                         : project.group,
      "mod_name"                      : mod_name,
      "mod_author"                    : mod_author,
      "mod_id"                        : mod_id,
      "license"                       : license,
      "description"                   : project.description,
      "credits"                       : credits,
      "main_url"                      : main_url,
      "source_url"                    : source_url,
      "issues_tracker_url"            : source_url.concat("/issues"),
      "crowdin_url"                   : crowdin_url,
      "discord_url"                   : discord_url,
      "ng_name"                       : "Nicolle Gama" // ★ October 30, 2001 - ✟ February 13, 2024
    ]

    filesMatching([
      '**/pack.mcmeta', 'fabric.mod.json',
      'META-INF/mods.toml', 'META-INF/neoforge.mods.toml', '*.mixins.json']) {
      expand expandProps
    }

    inputs.properties(expandProps)
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        artifactId base.archivesName.get()
        from components.java
      }
    }
    repositories {
      maven {
        url "file://" + System.getenv("local_maven")
      }
    }
  }
}

configure(subprojects.findAll { it.name != "common" }) {
  tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
  }

  tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
  }

  tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
  }

  processResources {
    from project(":common").sourceSets.main.resources
  }

  dependencies {
    compileOnly project(":common")
  }

  sourceSets.main.resources {
    srcDir(project(":common").file('src/main/generated'))
  }

  afterEvaluate {
    tasks.named("jar") {
      destinationDirectory = layout.buildDirectory.dir("libs")
    }

    tasks.named("sourcesJar") {
      destinationDirectory = layout.buildDirectory.dir("libs")
    }
  }
}
